name: Release Suite

on:
  push:
    tags:
      - v*

env:
  RUST_VERSION: "1.85"
  DIOXUS_CLI_VERSION: "0.6.3"

jobs:
  generate-assets:
    runs-on: ubuntu-latest
    env:
      SOURCE_LOGO: crypto7world-logo-v2.png
    steps:
      - name: Extract version
        run: echo "VERSION=$(echo ${GITHUB_REF#refs/tags/})" >> $GITHUB_OUTPUT
        id: extract_version

      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install ImageMagick
        run: sudo apt install imagemagick

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install Tailwind CSS
        run: |
          npm install -D

      - name: Generate Assets
        run: |
          chmod +x generate-assets.sh
          ./generate-assets.sh

      - name: Upload assets
        uses: actions/upload-artifact@v4
        with:
          name: generated-assets
          path: |
            icons/
            assets/

    outputs:
      VERSION: ${{ steps.extract_version.outputs.VERSION }}

  build:
    name: Build Release
    strategy:
      matrix:
        arch:
          - x86_64-linux-gnu
          # - aarch64-apple-darwin
          # - x86_64-apple-darwin
          - x86_64-windows
        include:
          - arch: x86_64-linux-gnu
            runner: ubuntu-24.04
            target: x86_64-unknown-linux-gnu
            bundle_args: --platform linux --package-types appimage
          # - arch: aarch64-apple-darwin
          #   runner: macos-latest
          #   target: aarch64-apple-darwin
          #   bundle_args: --platform macos --package-types dmg
          # - arch: x86_64-apple-darwin
          #   runner: macos-latest
          #   target: x86_64-apple-darwin
          #   bundle_args: --platform macos --package-types dmg
          - arch: x86_64-windows
            runner: windows-2022
            target: x86_64-pc-windows-msvc
            bundle_args: --platform windows --package-types nsis

    runs-on: ${{ matrix.runner }}
    needs: generate-assets
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Download generated assets
        uses: actions/download-artifact@v4
        with:
          name: generated-assets

      # ==============================
      #       Setup Rust
      # ==============================
      - name: Get Rust (Unix)
        if: matrix.arch != 'x86_64-windows'
        run: |
          echo Installing Rust $RUST_VERSION
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain $RUST_VERSION --target ${{ matrix.target }} --profile minimal
          source ~/.cargo/env
          curl -L --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/cargo-bins/cargo-binstall/main/install-from-binstall-release.sh | sh -s

      - name: Get Rust (Windows)
        if: matrix.arch == 'x86_64-windows'
        run: |
          echo Installing Rust $env:RUST_VERSION
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain $env:RUST_VERSION --target ${{ matrix.target }} --profile minimal
          $env:Path += ";$env:USERPROFILE\.cargo\bin"
          curl -L --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/cargo-bins/cargo-binstall/main/install-from-binstall-release.sh | sh -s

      # ==============================
      #       Install Dependencies
      # ==============================
      - name: Install deps for Linux
        if: matrix.arch == 'x86_64-linux-gnu'
        run: |
          sudo apt update
          sudo apt install \
            build-essential \
            wget \
            file \
            libwebkit2gtk-4.1-dev=2.44.0-2 \
            libwebkit2gtk-4.1-0=2.44.0-2 \
            libjavascriptcoregtk-4.1-0=2.44.0-2 \
            libjavascriptcoregtk-4.1-dev=2.44.0-2 \
            gir1.2-javascriptcoregtk-4.1=2.44.0-2 \
            gir1.2-webkit2-4.1=2.44.0-2 \
            xdotool \
            libxdo-dev \
            libssl-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            libusb-1.0-0-dev \
            libudev-dev \
            libhidapi-dev

      - name: Install deps for macOS
        if: runner.os == 'macOS'
        run: |
          # Dependencies are typically available via system frameworks on macOS

      - name: Install deps for Windows
        if: matrix.arch == 'x86_64-windows'
        run: |
          # Dependencies are handled by vcpkg or system libraries on Windows

      # ==============================
      #       Install Dioxus CLI
      # ==============================
      - name: Install Dioxus CLI (Unix)
        if: matrix.arch != 'x86_64-windows'
        run: |
          source ~/.cargo/env
          cargo binstall dioxus-cli@${{ env.DIOXUS_CLI_VERSION }}

      - name: Install Dioxus CLI (Windows)
        if: matrix.arch == 'x86_64-windows'
        run: |
          $env:Path += ";$env:USERPROFILE\.cargo\bin"
          cargo binstall dioxus-cli@${{ env.DIOXUS_CLI_VERSION }}

      # ==============================
      #       Build Application
      # ==============================
      - name: Build Heritage GUI (Unix)
        if: matrix.arch != 'x86_64-windows'
        run: |
          source ~/.cargo/env
          dx bundle -r --target ${{ matrix.target }} --features desktop ${{ matrix.bundle_args }}

      - name: Build Heritage GUI (Windows)
        if: matrix.arch == 'x86_64-windows'
        run: |
          $env:Path += ";$env:USERPROFILE\.cargo\bin"
          # $WINDOWS_VERSION=cargo metadata --no-deps --format-version=1 | jq -r '.packages[]|select(.name = "heritage-gui").version' | sed -r 's/-.*//'
          # sed -i -r "s/^version.*=.*$/version = `"$WINDOWS_VERSION`"/" Cargo.toml
          Invoke-Expression "dx bundle -r --target ${{ matrix.target }} --features desktop ${{ matrix.bundle_args }}"

      # ==============================
      #       Create Artifacts
      # ==============================
      - name: Find and prepare artifacts (Unix)
        if: matrix.arch != 'x86_64-windows'
        run: |
          mkdir -p artifacts

          # Copy all built packages
          cp dist/* artifacts/

          # Rename files to include version and architecture
          cd artifacts
          for file in *; do
            if [ -f "$file" ]; then
              ext="${file##*.}"
              mv "$file" "heritage-gui-${{ needs.generate-assets.outputs.VERSION }}-${{ matrix.arch }}.${ext}"
            fi
          done
          cd ..

      - name: Find and prepare artifacts (Windows)
        if: matrix.arch == 'x86_64-windows'
        run: |
          New-Item -ItemType Directory -Force -Path artifacts

          # Copy all built packages
          Get-ChildItem -Path "dist" | Copy-Item -Destination artifacts\

          # Rename files to include version and architecture
          Get-ChildItem -Path artifacts | ForEach-Object {
            $ext = $_.Extension
            if ($ext -eq ".exe") {$ext="-setup.exe"}
            $newName = "heritage-gui-${{ needs.generate-assets.outputs.VERSION }}-${{ matrix.arch }}$ext"
            Rename-Item $_.FullName $newName
          }

      # ==============================
      #       Upload Artifacts
      # ==============================
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: heritage-gui-${{ needs.generate-assets.outputs.VERSION }}-${{ matrix.arch }}
          path: artifacts/*
          compression-level: 0

  publish-release:
    name: Release
    needs: [build, generate-assets]
    runs-on: ubuntu-latest
    env:
      VERSION: ${{ needs.generate-assets.outputs.VERSION }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # ==============================
      #       Download artifacts
      # ==============================
      - name: Download artifacts
        uses: actions/download-artifact@v4

      # ==============================
      #       Create release
      # ==============================
      - name: Generate Full Changelog
        id: changelog
        run: |
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          echo "$(git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 ${{ env.VERSION }}^)..${{ env.VERSION }} -- src/ Cargo.toml Cargo.lock)" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Publish Release
        env:
          REPO_NAME: ${{ github.repository }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          body=$(cat <<- "ENDBODY"
          ## All Changes

          ${{ steps.changelog.outputs.CHANGELOG }}

          ## Downloads

          ### Linux
          - **AppImage**: [heritage-gui-${{ env.VERSION }}-x86_64-linux-gnu.AppImage](https://github.com/${{ env.REPO_NAME }}/releases/download/${{ env.VERSION }}/heritage-gui-${{ env.VERSION }}-x86_64-linux-gnu.AppImage)

          ### Windows
          - **NSIS Installer**: [heritage-gui-${{ env.VERSION }}-x86_64-windows-setup.exe](https://github.com/${{ env.REPO_NAME }}/releases/download/${{ env.VERSION }}/heritage-gui-${{ env.VERSION }}-x86_64-windows-setup.exe)

          ENDBODY
          )

          # Collect all artifacts
          assets=()
          for dir in heritage-gui-*; do
            if [ -d "$dir" ]; then
              for file in "$dir"/*; do
                if [ -f "$file" ]; then
                  assets+=("$file")
                fi
              done
            fi
          done

          tag_name="${{ env.VERSION }}"
          echo "$body" | gh release create --latest --title "Heritage GUI - $tag_name" -F "-" "$tag_name" "${assets[@]}"
